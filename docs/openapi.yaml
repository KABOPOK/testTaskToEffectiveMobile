openapi: 3.0.3
info:
  title: BankApi
  description: CRUD API для управления банковскими картами
  version: 1.0.0
paths:
  # --- Admin Card Controller ---
  /api/admin/card/get_all:
    get:
      tags:
        - Admin-Card
      summary: Получить список всех карт
      operationId: getAllCards
      responses:
        '200':
          description: Список карт
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardWithUserIdDto'
  /api/admin/card/create:
    post:
      tags:
        - Admin-Card
      summary: Создать новую карту
      operationId: createCard
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardWithUserIdDto'
      responses:
        '201':
          description: Создана карта
  /api/admin/card/get/{id}:
    get:
      tags:
        - Admin-Card
      summary: Получить карту по ID
      operationId: getCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Карта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardWithUserIdDto'
        '404':
          description: Карта не найдена
  /api/admin/card/update/{id}:
    put:
      tags:
        - Admin-Card
      summary: Обновить карту по ID
      operationId: updateCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardWithUserIdDto'
      responses:
        '200':
          description: Обновлена карта
        '404':
          description: Карта не найдена
  /api/admin/card/block/{id}:
    put:
      tags:
        - Admin-Card
      summary: Заблокировать карту по ID
      operationId: blockCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Карта успешно заблокирована
        '404':
          description: Карта не найдена
  /api/admin/card/delete/{id}:
    delete:
      tags:
        - Admin-Card
      summary: Удалить карту по ID
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Карта удалена
  /api/admin/card/get_to_block:
    get:
      tags:
        - Admin-Card
      summary: Получить список карт, ожидающих блокировки (со статусом TO_BLOCK)
      operationId: getCardsToBlock
      responses:
        '200':
          description: Список карт со статусом TO_BLOCK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardWithUserIdDto'

  # --- User Card Controller ---
  /api/user/card/get_filter_cards:
    get:
      tags:
        - User-Card
      summary: Получить список своих карт
      operationId: getCards
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [ ACTIVE, BLOCKED, TO_BLOCK ]
        - name: cardNumber
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Список карт с пагинацией
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/CardDto'
                  page:
                    type: integer
                    example: 0
                  size:
                    type: integer
                    example: 10
                  totalElements:
                    type: integer
                    example: 25
                  totalPages:
                    type: integer
                    example: 3
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExceptionBody'
  /api/user/card/{id}:
    get:
      tags:
        - User-Card
      summary: Получить карту по ID
      operationId: getCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Карта найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '404':
          description: Карта не найдена
        '401':
          description: Не авторизован
  /api/user/card/request_to_block/{id}:
    put:
      tags:
        - User-Card
      summary: Отправить запрос на блокировку карты
      operationId: requestCardBlock
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Запрос на блокировку отправлен
        '404':
          description: Карта не найдена
        '401':
          description: Не авторизован
  /api/user/card/balance/{id}:
    get:
      tags:
        - User-Card
      summary: Получить баланс карты по ID
      operationId: getCardBalance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Баланс карты
          content:
            text/plain:
              schema:
                type: number
                format: double
                example: 1000.49
        '404':
          description: Карта не найдена
        '401':
          description: Не авторизован
  /api/user/card/transfer:
    put:
      tags:
        - User-Card
      summary: Перевод средств между картами
      operationId: transferBetweenCards
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fromCardId:
                  type: string
                  format: uuid
                toCardId:
                  type: string
                  format: uuid
                amount:
                  type: number
                  format: double
              required:
                - fromCardId
                - toCardId
                - amount
      responses:
        '200':
          description: Перевод успешно выполнен
          content:
            text/plain:
              schema:
                type: number
                format: double
                example: 950.50
        '400':
          description: Ошибка перевода
        '401':
          description: Не авторизован
        '404':
          description: Карта не найдена

  # --- Auth Controller ---
  /api/public/user/register:
    post:
      tags:
        - Auth
      summary: Регистрация нового пользователя
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '201':
          description: Пользователь зарегистрирован
        '400':
          description: Ошибка валидации
  /api/public/user/auth:
    post:
      tags:
        - Auth
      summary: Аутентификация и получение токена
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authDataDto'
      responses:
        '200':
          description: JWT токен
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Неверный логин или пароль

  # --- Admin User Controller ---
  /api/admin/user/create:
    post:
      tags:
        - Admin-User
      summary: Создать нового пользователя
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '201':
          description: Пользователь создан
        '400':
          description: Ошибка валидации
  /api/admin/user/update/{id}:
    put:
      tags:
        - Admin-User
      summary: Обновить данные пользователя
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        '200':
          description: Пользователь обновлен
        '404':
          description: Пользователь не найден
  /api/admin/user/block/{id}:
    put:
      tags:
        - Admin-User
      summary: Заблокировать пользователя
      operationId: blockUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Пользователь заблокирован
        '404':
          description: Пользователь не найден

components:
  schemas:
    CardDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cardNumber:
          type: string
        ownerName:
          type: string
        expirationDate:
          type: string
          format: date
        status:
          type: string
        balance:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time
      required:
        - cardNumber
        - ownerName
        - expirationDate
        - status
    CardWithUserIdDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cardNumber:
          type: string
        ownerName:
          type: string
        expirationDate:
          type: string
          format: date
        status:
          type: string
        balance:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
      required:
        - cardNumber
        - ownerName
        - expirationDate
        - status
        - userId
    UserDto:
      type: object
      properties:
        name:
          type: string
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    authDataDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    ApiError:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
      required:
        - title
        - description
    ExceptionBody:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ApiError'
      required:
        - errors
